// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	openapi "k8s.io/client-go/openapi"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// Paths provides a mock function with no fields
func (_m *MockClient) Paths() (map[string]openapi.GroupVersion, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Paths")
	}

	var r0 map[string]openapi.GroupVersion
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string]openapi.GroupVersion, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]openapi.GroupVersion); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]openapi.GroupVersion)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_Paths_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Paths'
type MockClient_Paths_Call struct {
	*mock.Call
}

// Paths is a helper method to define mock.On call
func (_e *MockClient_Expecter) Paths() *MockClient_Paths_Call {
	return &MockClient_Paths_Call{Call: _e.mock.On("Paths")}
}

func (_c *MockClient_Paths_Call) Run(run func()) *MockClient_Paths_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Paths_Call) Return(_a0 map[string]openapi.GroupVersion, _a1 error) *MockClient_Paths_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_Paths_Call) RunAndReturn(run func() (map[string]openapi.GroupVersion, error)) *MockClient_Paths_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
