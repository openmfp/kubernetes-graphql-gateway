// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockGroupVersion is an autogenerated mock type for the GroupVersion type
type MockGroupVersion struct {
	mock.Mock
}

type MockGroupVersion_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGroupVersion) EXPECT() *MockGroupVersion_Expecter {
	return &MockGroupVersion_Expecter{mock: &_m.Mock}
}

// Schema provides a mock function with given fields: contentType
func (_m *MockGroupVersion) Schema(contentType string) ([]byte, error) {
	ret := _m.Called(contentType)

	if len(ret) == 0 {
		panic("no return value specified for Schema")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(contentType)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(contentType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(contentType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGroupVersion_Schema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Schema'
type MockGroupVersion_Schema_Call struct {
	*mock.Call
}

// Schema is a helper method to define mock.On call
//   - contentType string
func (_e *MockGroupVersion_Expecter) Schema(contentType interface{}) *MockGroupVersion_Schema_Call {
	return &MockGroupVersion_Schema_Call{Call: _e.mock.On("Schema", contentType)}
}

func (_c *MockGroupVersion_Schema_Call) Run(run func(contentType string)) *MockGroupVersion_Schema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockGroupVersion_Schema_Call) Return(_a0 []byte, _a1 error) *MockGroupVersion_Schema_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGroupVersion_Schema_Call) RunAndReturn(run func(string) ([]byte, error)) *MockGroupVersion_Schema_Call {
	_c.Call.Return(run)
	return _c
}

// ServerRelativeURL provides a mock function with no fields
func (_m *MockGroupVersion) ServerRelativeURL() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServerRelativeURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockGroupVersion_ServerRelativeURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServerRelativeURL'
type MockGroupVersion_ServerRelativeURL_Call struct {
	*mock.Call
}

// ServerRelativeURL is a helper method to define mock.On call
func (_e *MockGroupVersion_Expecter) ServerRelativeURL() *MockGroupVersion_ServerRelativeURL_Call {
	return &MockGroupVersion_ServerRelativeURL_Call{Call: _e.mock.On("ServerRelativeURL")}
}

func (_c *MockGroupVersion_ServerRelativeURL_Call) Run(run func()) *MockGroupVersion_ServerRelativeURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGroupVersion_ServerRelativeURL_Call) Return(_a0 string) *MockGroupVersion_ServerRelativeURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGroupVersion_ServerRelativeURL_Call) RunAndReturn(run func() string) *MockGroupVersion_ServerRelativeURL_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGroupVersion creates a new instance of MockGroupVersion. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGroupVersion(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGroupVersion {
	mock := &MockGroupVersion{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
