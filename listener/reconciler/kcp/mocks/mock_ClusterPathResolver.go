// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockClusterPathResolver is an autogenerated mock type for the ClusterPathResolver type
type MockClusterPathResolver struct {
	mock.Mock
}

type MockClusterPathResolver_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClusterPathResolver) EXPECT() *MockClusterPathResolver_Expecter {
	return &MockClusterPathResolver_Expecter{mock: &_m.Mock}
}

// ClientForCluster provides a mock function with given fields: name
func (_m *MockClusterPathResolver) ClientForCluster(name string) (client.Client, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for ClientForCluster")
	}

	var r0 client.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (client.Client, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) client.Client); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClusterPathResolver_ClientForCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientForCluster'
type MockClusterPathResolver_ClientForCluster_Call struct {
	*mock.Call
}

// ClientForCluster is a helper method to define mock.On call
//   - name string
func (_e *MockClusterPathResolver_Expecter) ClientForCluster(name interface{}) *MockClusterPathResolver_ClientForCluster_Call {
	return &MockClusterPathResolver_ClientForCluster_Call{Call: _e.mock.On("ClientForCluster", name)}
}

func (_c *MockClusterPathResolver_ClientForCluster_Call) Run(run func(name string)) *MockClusterPathResolver_ClientForCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClusterPathResolver_ClientForCluster_Call) Return(_a0 client.Client, _a1 error) *MockClusterPathResolver_ClientForCluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClusterPathResolver_ClientForCluster_Call) RunAndReturn(run func(string) (client.Client, error)) *MockClusterPathResolver_ClientForCluster_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClusterPathResolver creates a new instance of MockClusterPathResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClusterPathResolver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClusterPathResolver {
	mock := &MockClusterPathResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
