// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
)

// MockCRDResolver is an autogenerated mock type for the CRDResolver type
type MockCRDResolver struct {
	mock.Mock
}

type MockCRDResolver_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCRDResolver) EXPECT() *MockCRDResolver_Expecter {
	return &MockCRDResolver_Expecter{mock: &_m.Mock}
}

// Resolve provides a mock function with no fields
func (_m *MockCRDResolver) Resolve() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Resolve")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCRDResolver_Resolve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resolve'
type MockCRDResolver_Resolve_Call struct {
	*mock.Call
}

// Resolve is a helper method to define mock.On call
func (_e *MockCRDResolver_Expecter) Resolve() *MockCRDResolver_Resolve_Call {
	return &MockCRDResolver_Resolve_Call{Call: _e.mock.On("Resolve")}
}

func (_c *MockCRDResolver_Resolve_Call) Run(run func()) *MockCRDResolver_Resolve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCRDResolver_Resolve_Call) Return(_a0 []byte, _a1 error) *MockCRDResolver_Resolve_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCRDResolver_Resolve_Call) RunAndReturn(run func() ([]byte, error)) *MockCRDResolver_Resolve_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveApiSchema provides a mock function with given fields: crd
func (_m *MockCRDResolver) ResolveApiSchema(crd *v1.CustomResourceDefinition) ([]byte, error) {
	ret := _m.Called(crd)

	if len(ret) == 0 {
		panic("no return value specified for ResolveApiSchema")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(*v1.CustomResourceDefinition) ([]byte, error)); ok {
		return rf(crd)
	}
	if rf, ok := ret.Get(0).(func(*v1.CustomResourceDefinition) []byte); ok {
		r0 = rf(crd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*v1.CustomResourceDefinition) error); ok {
		r1 = rf(crd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCRDResolver_ResolveApiSchema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveApiSchema'
type MockCRDResolver_ResolveApiSchema_Call struct {
	*mock.Call
}

// ResolveApiSchema is a helper method to define mock.On call
//   - crd *v1.CustomResourceDefinition
func (_e *MockCRDResolver_Expecter) ResolveApiSchema(crd interface{}) *MockCRDResolver_ResolveApiSchema_Call {
	return &MockCRDResolver_ResolveApiSchema_Call{Call: _e.mock.On("ResolveApiSchema", crd)}
}

func (_c *MockCRDResolver_ResolveApiSchema_Call) Run(run func(crd *v1.CustomResourceDefinition)) *MockCRDResolver_ResolveApiSchema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1.CustomResourceDefinition))
	})
	return _c
}

func (_c *MockCRDResolver_ResolveApiSchema_Call) Return(_a0 []byte, _a1 error) *MockCRDResolver_ResolveApiSchema_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCRDResolver_ResolveApiSchema_Call) RunAndReturn(run func(*v1.CustomResourceDefinition) ([]byte, error)) *MockCRDResolver_ResolveApiSchema_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCRDResolver creates a new instance of MockCRDResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCRDResolver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCRDResolver {
	mock := &MockCRDResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
