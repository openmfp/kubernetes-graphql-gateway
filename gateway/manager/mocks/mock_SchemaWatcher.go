// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockSchemaWatcher is an autogenerated mock type for the SchemaWatcher type
type MockSchemaWatcher struct {
	mock.Mock
}

type MockSchemaWatcher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSchemaWatcher) EXPECT() *MockSchemaWatcher_Expecter {
	return &MockSchemaWatcher_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockSchemaWatcher) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSchemaWatcher_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockSchemaWatcher_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockSchemaWatcher_Expecter) Close() *MockSchemaWatcher_Close_Call {
	return &MockSchemaWatcher_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockSchemaWatcher_Close_Call) Run(run func()) *MockSchemaWatcher_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSchemaWatcher_Close_Call) Return(_a0 error) *MockSchemaWatcher_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSchemaWatcher_Close_Call) RunAndReturn(run func() error) *MockSchemaWatcher_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Initialize provides a mock function with given fields: ctx, watchPath
func (_m *MockSchemaWatcher) Initialize(ctx context.Context, watchPath string) error {
	ret := _m.Called(ctx, watchPath)

	if len(ret) == 0 {
		panic("no return value specified for Initialize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, watchPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSchemaWatcher_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type MockSchemaWatcher_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
//   - ctx context.Context
//   - watchPath string
func (_e *MockSchemaWatcher_Expecter) Initialize(ctx interface{}, watchPath interface{}) *MockSchemaWatcher_Initialize_Call {
	return &MockSchemaWatcher_Initialize_Call{Call: _e.mock.On("Initialize", ctx, watchPath)}
}

func (_c *MockSchemaWatcher_Initialize_Call) Run(run func(ctx context.Context, watchPath string)) *MockSchemaWatcher_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSchemaWatcher_Initialize_Call) Return(_a0 error) *MockSchemaWatcher_Initialize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSchemaWatcher_Initialize_Call) RunAndReturn(run func(context.Context, string) error) *MockSchemaWatcher_Initialize_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSchemaWatcher creates a new instance of MockSchemaWatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSchemaWatcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSchemaWatcher {
	mock := &MockSchemaWatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
