// Code generated by mockery v2.49.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockIOHandler is an autogenerated mock type for the IOHandler type
type MockIOHandler struct {
	mock.Mock
}

type MockIOHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIOHandler) EXPECT() *MockIOHandler_Expecter {
	return &MockIOHandler_Expecter{mock: &_m.Mock}
}

// Read provides a mock function with given fields: clusterName
func (_m *MockIOHandler) Read(clusterName string) ([]byte, error) {
	ret := _m.Called(clusterName)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(clusterName)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(clusterName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(clusterName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIOHandler_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockIOHandler_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - clusterName string
func (_e *MockIOHandler_Expecter) Read(clusterName interface{}) *MockIOHandler_Read_Call {
	return &MockIOHandler_Read_Call{Call: _e.mock.On("Read", clusterName)}
}

func (_c *MockIOHandler_Read_Call) Run(run func(clusterName string)) *MockIOHandler_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIOHandler_Read_Call) Return(_a0 []byte, _a1 error) *MockIOHandler_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIOHandler_Read_Call) RunAndReturn(run func(string) ([]byte, error)) *MockIOHandler_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: JSON, clusterName
func (_m *MockIOHandler) Write(JSON []byte, clusterName string) error {
	ret := _m.Called(JSON, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, string) error); ok {
		r0 = rf(JSON, clusterName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIOHandler_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type MockIOHandler_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - JSON []byte
//   - clusterName string
func (_e *MockIOHandler_Expecter) Write(JSON interface{}, clusterName interface{}) *MockIOHandler_Write_Call {
	return &MockIOHandler_Write_Call{Call: _e.mock.On("Write", JSON, clusterName)}
}

func (_c *MockIOHandler_Write_Call) Run(run func(JSON []byte, clusterName string)) *MockIOHandler_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(string))
	})
	return _c
}

func (_c *MockIOHandler_Write_Call) Return(_a0 error) *MockIOHandler_Write_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIOHandler_Write_Call) RunAndReturn(run func([]byte, string) error) *MockIOHandler_Write_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIOHandler creates a new instance of MockIOHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIOHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIOHandler {
	mock := &MockIOHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
