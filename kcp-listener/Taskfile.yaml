version: "3"

vars:
  LOCAL_BIN: bin
  CONTROLLER_TOOLS_VERSION: v0.16.4
  ENVTEST_K8S_VERSION: "1.31.0"
  ENVTEST_VERSION: release-0.19
  CRD_DIRECTORY: config/crd/bases
tasks:
  default:
    cmds:
      - task --list-all
  ## Setup
  setup:kcp-local:
    desc: "Setup kcp local binary"
    vars:
      KCP_VERSION: "0.26.0"
      RELEASES_URL: "https://github.com/kcp-dev/kcp/releases"
      KCP_FILENAME:
        sh: echo "kcp_{{.KCP_VERSION}}_{{OS}}_{{ARCH}}.tar.gz"
      KCP_PATH:
        sh: echo "download/v{{.KCP_VERSION}}/kcp_{{.KCP_VERSION}}_{{OS}}_{{ARCH}}.tar.gz"
      KCP_FILE_EXISTS:
        sh: ([ -f {{.LOCAL_BIN}}/kcp ] && [ -x {{.LOCAL_BIN}}/kcp ] && echo "true" || echo "false")
    cmds:
      - |
        {{ if eq .KCP_FILE_EXISTS "false" }}
        mkdir -p {{.LOCAL_BIN}}
        curl -L {{ .RELEASES_URL }}/{{ .KCP_PATH }} -o {{ .LOCAL_BIN }}/{{ .KCP_FILENAME }};
        echo "listing downloaded files:$(ls -al {{ .LOCAL_BIN }}/{{ .KCP_FILENAME }})";
        tar -xzvf {{ .LOCAL_BIN }}/{{ .KCP_FILENAME }} -C {{ .LOCAL_BIN }};
        rm {{ .LOCAL_BIN }}/{{ .KCP_FILENAME }};
        mv {{ .LOCAL_BIN }}/bin/kcp {{ .LOCAL_BIN }}/kcp;
        rmdir {{ .LOCAL_BIN }}/bin;
        rm {{ .LOCAL_BIN }}/LICENSE {{ .LOCAL_BIN }}/README.md;
        {{ else }}
        echo "kcp binary file already exists, nothing to do!"
        {{ end }}
  setup:controller-gen:
    internal: true
    cmds:
      - test -s {{.LOCAL_BIN}}/controller-gen || GOBIN=$(pwd)/{{.LOCAL_BIN}} go install sigs.k8s.io/controller-tools/cmd/controller-gen@{{.CONTROLLER_TOOLS_VERSION}}
  setup:envtest:
    internal: true
    cmds:
      - test -s {{.LOCAL_BIN}}/setup-envtest || GOBIN=$(pwd)/{{.LOCAL_BIN}} go install sigs.k8s.io/controller-runtime/tools/setup-envtest@{{.ENVTEST_VERSION}}
  setup:golangci-lint:
    internal: true
    cmds:
      - test -s {{.LOCAL_BIN}}/golangci-lint || GOBIN=$(pwd)/{{.LOCAL_BIN}} go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
  setup:docker-compose:
    internal: true
    cmds:
      - test -s {{.LOCAL_BIN}}/docker-compose || ( GOBIN=$(pwd)/{{.LOCAL_BIN}} go install github.com/docker/compose/v2/cmd@latest && mv $(pwd)/{{.LOCAL_BIN}}/cmd $(pwd)/{{.LOCAL_BIN}}/docker-compose )
  setup:go-test-coverage:
    internal: true
    cmds:
      - test -s {{.LOCAL_BIN}}/go-test-coverage || ( GOBIN=$(pwd)/{{.LOCAL_BIN}} go install github.com/vladopajic/go-test-coverage/v2@latest )
  ## Development
  manifests:
    deps: [setup:controller-gen]
    cmds:
      - "{{.LOCAL_BIN}}/controller-gen rbac:roleName=manager-role crd paths=./... output:crd:artifacts:config={{.CRD_DIRECTORY}}"
  generate:
    cmds:
      - task: manifests
      - "{{.LOCAL_BIN}}/controller-gen object paths=./..."
  build:
    cmds:
      - go build ./...
  docker-build:
    cmds:
      - docker build .
  ## Testing
  fmt:
    cmds:
      - go fmt ./...
  lint:
    deps: [setup:golangci-lint]
    cmds:
      - task: fmt
      - "{{.LOCAL_BIN}}/golangci-lint run --timeout 15m ./..."
  envtest:
    internal: true
    env:
      KUBEBUILDER_ASSETS:
        sh: $(pwd)/{{.LOCAL_BIN}}/setup-envtest use {{.ENVTEST_K8S_VERSION}} --bin-dir $(pwd)/{{.LOCAL_BIN}} -p path
      GO111MODULE: on
    cmds:
      - go test -count=1 ./... {{.ADDITIONAL_COMMAND_ARGS}}
  test:
    deps: [setup:envtest]
    cmds:
      - task: envtest
  cover:
    deps: [setup:envtest]
    cmds:
      - task: envtest
        vars:
          ADDITIONAL_COMMAND_ARGS: -coverprofile=./cover.out -covermode=atomic
  validate:
    cmds:
      - task: lint
      - task: test
  assert-coverage:
    deps: [setup:go-test-coverage]
    cmds:
      - task: cover
      - "{{.LOCAL_BIN}}/go-test-coverage --profile cover.out --config ./.testcoverage.yml"
  install:
    cmds:
      - kubectl apply -f config/crd/bases
  uninstall:
    cmds:
      - kubectl delete -f config/crd/bases
  run:
    cmds:
      - go run ./cmd/main.go operator